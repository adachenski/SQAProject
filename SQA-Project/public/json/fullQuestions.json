[
    {
        "id": 1,
        "category": "testingTypes",
        "referToId": 19,
        "title": "What is Functional testing?",
        "content": "<div> Functional testing is a type of testing which verifies that each function of the software application operates in conformance with the requirement specification. This testing mainly involves black box testing and it is not concerned about the source code of the application. Each and every functionality of the system is tested by providing appropriate input, verifying the output and comparing the actual results with the expected results. This testing involves checking of User Interface, APIs, Database, security, client/ server applications and functionality of the Application Under Test. The testing can be done either manually or using automation </div><h3> What do you test in Functional Testing? </h3> <div> The prime objective of Functional testing is checking the functionalities of the software system. It mainly concentrates on </div><div><b>Mainline functions</b>: Testing the main functions of an application</div><div><b>Basic Usability</b>: It involves basic usability testing of the system. It checks whether an user can freely</div>navigate through the screens without any difficulties.</div><div><b>Accessibility</b>: Checks the accessibility of the system for the user</div><div><b>Error Conditions</b>: Usage of testing techniques to check for error conditions. It checks whether suitable error messages are displayed.</div><div> <ul> <h3>Types of Functional testing</h3> <li>Unit Testing</li><li>Integration Testing</li><li>Smoke/Sanity</li><li>User Acceptance</li><li>Localization</li><li>Globalization</li><li>Interoperability</li><li>So on..</li></ul> </div>"
    },
    {
        "id": 2,
        "category": "testingTypes",
        "referToId": 20,
        "title": "What is Non-functional testing?",
        "content": " <div> <div> Non-functional testing is the testing of a software application or system for its non-functional requirements: the way a system operates, rather than specific behaviours of that system. Like functional testing, there are non-functional requirements like performance, usability, load factor that are also important. Many times you have come across to long load time messages while accessing an application. To address this issue, performance testing is carried out to check & fine tune system response times. The goal of performance testing is to reduce response time to an acceptable level. Likewise, you might have seen the message like 'Server Busy'. Hence, load testing is carried out to check systems performance at different loads i.e. number of users accessing the system. </div><div> <ul> <h4>Types on Non-functional testing</h4> <li>Performance</li><li>Endurance</li><li>Load</li><li>Volume</li><li>Scalability</li><li>Usability</li><li>So on..</li></ul> </div></div>"
    },
    {
        "id": 3,
        "category": "testingTypes",
        "referToId": 25,
        "title": "What is Ad-hoc testing?",
        "content": " <div> <div> Adhoc testing is an informal testing type with an aim to break the system. This testing is usually an unplanned activity. It does not follow any test design techniques to create test cases. In fact is does not create test cases altogether! This testing is primarily performed if the knowledge of testers in the system under test is very high. Testers randomly test the application without any test cases or any business requirement document. Ad hoc Testing does not follow any structured way of testing and it is randomly done on any part of application. Main aim of this testing is to find defects by random checking. Adhoc testing can be achieved with the testing technique called Error Guessing. Error guessing can be done by the people having enough experience on the system to 'guess' the most likely source of errors. This testing requires no documentation/ planning /process to be followed. Since this testing aims at finding defects through random approach, without any documentation, defects will not be mapped to test cases. Hence, sometimes, it is very difficult to reproduce the defects as there are no test steps or requirements mapped to it. </div><h3>When execute Adhoc Testing?</h3> <div>Ad hoc testing can be performed when there is limited time to do elaborative testing. Usually adhoc testing is performed after the formal test execution. And if time permits, ad hoc testing can be done on the system). Ad hoc testing will be effective only if the tester is knowledgeable of the System Under Test.</div><h3>Types of adhoc testing</h3> <dl> <dt><b>Buddy Testing </b></dt> <dd>Two buddies mutually work on identifying defects in the same module. Mostly one buddy will be from development team and another person will be from testing team. Buddy testing helps the testers develop better test cases and development team can also make design changes early. This testing usually happens after unit testing completion. </dd> <dt><b>Pair testing </b></dt> <dd>Two testers are assigned modules, share ideas and work on the same machines to find defects. One person can execute the tests and another person can take notes on the findings. Roles of the persons can be a tester and scriber during testing.</dd> <dt><b>Monkey Testing </b></dt> <dd>Randomly test the product or application without test cases with a goal to break the system.</dd> </dl> </div>"
    },
    {
        "id": 4,
        "category": "testingTypes",
        "referToId": 35,
        "title": "What is Smoke testing?",
        "content": "<div>Smoke Testing is a kind of Software Testing performed after software build to ascertain that the critical functionalities of the program is working fine. It is executed 'before' any detailed functional or regression tests are executed on the software build. The purpose is to reject a badly broken application, so that the QA team does not waste time installing and testing the software application.In Smoke Testing, the test cases chosen cover the most important functionality or component of the system. The objective is not to perform exhaustive testing, but to verify that the critical functionalities of the system is working fine.For Example a typical smoke test would be - Verify that the application launches successfully, Check that the GUI is responsive ... etc.</div>"
    },
    {
        "id": 5,
        "category": "testingTypes",
        "referToId": 36,
        "title": "What is Sanity testing?",
        "content": "<div>Sanity testing is a kind of Software Testing performed after receiving a software build, with minor changes in code, or functionality, to ascertain that the bugs have been fixed and no further issues are introduced due to these changes. The goal is to determine that the proposed functionality works roughly as expected. If sanity test fails, the build is rejected to save the time and costs involved in a more rigorous testing.The objective is 'not' to verify thoroughly the new functionality, but to determine that the developer has applied some rationality (sanity) while producing the software. For instance, if your scientific calculator gives the result of 2 + 2=5! Then, there is no point testing the advanced functionalities like sin 30 + cos 50.</div>"
    },
    {
        "id": 6,
        "category": "documentation",
        "referToId": 68,
        "title": "What is Test Case?",
        "content": " <div> <p> A test case is a set of conditions or variables under which a tester will determine whether a system under test satisfies requirements or works correctly. The process of developing test cases can also help find problems in the requirements or design of an application. </p><p> TEST CASE TEMPLATE A test case can have the following elements. Note, however, that normally a test management tool is used by companies and the format is determined by the tool used. </p><div> <dl> <dt><b>Test Suite ID</b></dt> <dd>The ID of the test suite to which this test case belongs.</dd> <dt><b>Test Case ID</b></dt> <dd> The ID of the test case.</dd> <dt><b>Test Case Summary</b></dt> <dd>The summary / objective of the test case.</dd> <dt><b>Related Requirement</b></dt> <dd> The ID of the requirement this test case relates/traces to.</dd> <dt><b>Prerequisites</b></dt> <dd>Any prerequisites or preconditions that must be fulfilled prior to executing the test.</dd> <dt><b>Test Procedure</b></dt> <dd> Step-by-step procedure to execute the test.</dd> <dt><b>Test Data</b></dt> <dd>The test data, or links to the test data, that are to be used while conducting the test.</dd> <dt><b>Expected Result</b></dt> <dd> The expected result of the test.</dd> <dt><b>Actual Result</b></dt> <dd>The actual result of the test; to be filled after executing the test.</dd> <dt><b>Status</b></dt> <dd> Pass or Fail. Other statuses can be ‘Not Executed’ if testing is not performed and ‘Blocked’ if testing is blocked. </dd> <dt><b>Created By</b></dt> <dd>The name of the author of the test case.</dd> <dt><b>Executed By</b></dt> <dd> The name of the person who executed the test.</dd> <dt><b>Date of Execution</b></dt> <dd>The date of execution of the test.</dd> <dt><b>Test Environment</b></dt> <dd> The environment (Hardware/Software/Network) in which the test was executed.</dd> </dl> </div><ul> <li>As far as possible, write test cases in such a way that you test only one thing at a time. Do not overlap or complicate test cases. Attempt to make your test cases ‘atomic’.</li><li>Ensure that all positive scenarios and negative scenarios are covered.</li><li>Language: <ul> <li>Write in simple and easy to understand language.</li><li>Use active voice: Do this, do that.</li><li>Use exact and consistent names (of forms, fields, etc).</li></ul> </li><li>Characteristics of a good test case: <ul> <li><em>Accurate</em>: Exacts the purpose.</li><li><em>Economical</em>: No unnecessary steps or words.</li><li><em>Traceable</em>: Capable of being traced to requirements.</li><li><em>Repeatable</em>: Can be used to perform the test over and over.</li><li><em>Reusable</em>: Can be reused if necessary.</li></ul> </li></ul> </div>"
    },
    {
        "id": 7,
        "category": "documentation",
        "referToId": 69,
        "title": "What is a Use Case?",
        "content": " <div> <h2> Definition - What does <span>Use Case</span> mean? </h2> <div> <div> <div> <p>A use case is a software and system engineering term that describes how a user uses a system to accomplish a particular goal. A use case acts as a software modeling technique that defines the features to be implemented and the resolution of any errors that may be encountered.</p></div></div></div></div><div> <h2>Techopedia explains <span>Use Case</span></h2> <div> <div> <p>Use cases define interactions between external actors and the system to attain particular goals. There are three basic elements that make up a use case: <br></p><ul> <li>Actors: Actors are the type of users that interact with the system. </li><li>System: Use cases capture functional requirements that specify the intended behavior of the system. </li><li>Goals: Use cases are typically initiated by a user to fulfill goals describing the activities and variants involved in attaining the goal. </li></ul> <p> Use cases are modeled using unified modeling language and are represented by ovals containing the names of the use case. Actors are represented using lines with the name of the actor written below the line. To represent an actor's participation in a system, a line is drawn between the actor and the use case. Boxes around the use case represent the system boundary. <br><br>Characteristics associated with use cases are:<br></p><ul> <li>Organizing functional requirements</li><li>Modeling the goals of system user interactions</li><li>Recording scenarios from trigger events to ultimate goals</li><li>Describing the basic course of actions and exceptional flow of events</li><li>Permitting a user to access the functionality of another event</li></ul> <p> The steps in designing use cases are:<br></p><ul> <li>Identify the users of the system</li><li>For each category of users, create a user profile. This includes all roles played by the users relevant to the system.</li><li>Identify significant goals associated with each role to support the system. The system’s value proposition identifies the significant role.</li><li>Create use cases for every goal associated with a use case template and maintain the same abstraction level throughout the use case. Higher level use case steps are treated as goals for the lower level. </li><li>Structure the use cases</li><li>Review and validate the users</li></ul> </div></div></div>"
    },
    {
        "id": 8,
        "category": "documentation",
        "referToId": 72,
        "title": "What is Test Matrix?",
        "content": "<div><h4>What is a requirements test matrix?</h4><p>The requirements test matrix is a project management tool for tracking and managing testing efforts, based on requirements, throughout the project's life cycle. The requirements test matrix is a table, where requirement descriptions are put in the rows of the table, and the descriptions of testing efforts are put in the column headers of the same table. </p><p>The requirements test matrix is similar to the requirements traceability matrix, which is a representation of user requirements aligned against system functionality. The requirements traceability matrix ensures that all user requirements are addressed by the system integration team and implemented in the system integration effort. The requirements test matrix is a representation of user requirements aligned against system testing. Similarly to the requirements traceability matrix, the requirements test matrix ensures that all user requirements are addressed by the system test team and implemented in the system testing effort.</p></div>"
    },
    {
        "id": 9,
        "category": "documentation",
        "referToId": 75,
        "title": "What is Traceability Matri?",
        "content": " <div> <div> <h2> Definition - What does <span>Traceability Matrix</span> mean? </h2> <div> <div> <div> A traceability matrix is a type of document that helps correlate and trace business, application, security or any other requirements to their implementation, testing or completion. It evaluates and relates between different system components and provides the status of project requirements in terms of their level of completion.</div></div></div></div><div> <h2><span>Traceability Matrix</span></h2> <div> <div> <p>A traceability matrix is primarily used in software development projects to trace, identify and verify that a specific functionality or component is being developed. Typically, a traceability matrix is a worksheet type document consisting of a table(s). Two different sets of values are compared against each other by placing an identifier for one set in the top row, and the other set on the left column. If there is commonality or a relationship, a mark is placed where the column and row intersect.</p><p>For example, if software being developed is to be evaluated for completion using a traceability matrix, project requirements can be placed within the left column and their pertaining test cases on the top row. If the project requirement and its test case are completed, a mark can be placed where they intersect on the chart, and all of these requirements can be added to calculate software completion status.</p></div></div></div></div>"
    },
    {
        "id": 10,
        "category": "documentation",
        "referToId": 67,
        "title": "What is a Test Plan?",
        "content": "A test plan helps you and your peers get on the same page. It serves as a framework and a guide to ensure your testing project is successful and helps you control risk. The very act of writing helps us think through things in ways we might not think about normally. The value of writing your plan alone is tremendous. These documents serve as a means of communication across the software team. They can also help track changes to the testing project overall. As changes to the test plan are made (items to be tested, resources involved, schedule, etc) the test plan document should be updated to reflect those decisions. There’s no set way of creating a test plan, but there are common suggestions on what to include. </div>"
    }
]